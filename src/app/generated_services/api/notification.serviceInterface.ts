/**
 * Carlson Gracie Backend API
 * API for managing students, belts, graduation requirements, notices, frequencies and user authentication with Keycloak
 *
 * Contact: support@carlsongracie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ApiAuthLoginPost401Response } from '../model/models';
import { CreateNotificationDTO } from '../model/models';
import { MarkAsReadDTO } from '../model/models';
import { NotificationStatsDTO } from '../model/models';
import { NotificationType } from '../model/models';
import { ShowNotificationDTO } from '../model/models';
import { UpdateNotificationDTO } from '../model/models';
import { ValidationProblemDetails } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface NotificationServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Cleanup expired notifications (Admin only)
     * 
     */
    apiNotificationCleanupExpiredPost(extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get all notifications (Admin only)
     * 
     */
    apiNotificationGet(extraHttpRequestParams?: any): Observable<Array<ShowNotificationDTO>>;

    /**
     * Delete a notification (soft delete)
     * 
     * @param id The notification ID to delete
     */
    apiNotificationIdDelete(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get a specific notification by ID
     * 
     * @param id The notification ID
     */
    apiNotificationIdGet(id: string, extraHttpRequestParams?: any): Observable<ShowNotificationDTO>;

    /**
     * Update an existing notification
     * 
     * @param id The notification ID to update
     * @param updateNotificationDTO The updated notification data
     */
    apiNotificationIdPut(id: string, updateNotificationDTO?: UpdateNotificationDTO, extraHttpRequestParams?: any): Observable<ShowNotificationDTO>;

    /**
     * Mark all notifications as read for the current user
     * 
     */
    apiNotificationMarkAllAsReadPost(extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Mark specific notifications as read
     * 
     * @param markAsReadDTO The notification IDs to mark as read
     */
    apiNotificationMarkAsReadPost(markAsReadDTO?: MarkAsReadDTO, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get notifications for the current user
     * 
     */
    apiNotificationMyGet(extraHttpRequestParams?: any): Observable<Array<ShowNotificationDTO>>;

    /**
     * Get notification statistics for the current user
     * 
     */
    apiNotificationMyStatsGet(extraHttpRequestParams?: any): Observable<NotificationStatsDTO>;

    /**
     * Get unread notifications for the current user
     * 
     */
    apiNotificationMyUnreadGet(extraHttpRequestParams?: any): Observable<Array<ShowNotificationDTO>>;

    /**
     * Create a new notification
     * 
     * @param createNotificationDTO The notification data to create
     */
    apiNotificationPost(createNotificationDTO?: CreateNotificationDTO, extraHttpRequestParams?: any): Observable<ShowNotificationDTO>;

    /**
     * Get notifications by type
     * 
     * @param type The notification type
     */
    apiNotificationTypeTypeGet(type: NotificationType, extraHttpRequestParams?: any): Observable<Array<ShowNotificationDTO>>;

    /**
     * Get notifications by user ID (Admin only)
     * 
     * @param userId The user ID
     */
    apiNotificationUserUserIdGet(userId: string, extraHttpRequestParams?: any): Observable<Array<ShowNotificationDTO>>;

}
