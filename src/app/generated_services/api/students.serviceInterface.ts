/**
 * Carlson Gracie Backend API
 * API for managing students, belts, graduation requirements, notices, frequencies and user authentication with Keycloak
 *
 * Contact: support@carlsongracie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ApiAuthLoginPost401Response } from '../model/models';
import { CreateStudentDTO } from '../model/models';
import { PhotoResponseDTO } from '../model/models';
import { ShowStudentDTO } from '../model/models';
import { StudentSearchDTO } from '../model/models';
import { UpdateStudentDTO } from '../model/models';
import { UploadPhotoBase64DTO } from '../model/models';
import { ValidationProblemDetails } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface StudentsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Get all active students
     * 
     */
    apiStudentsActiveGet(extraHttpRequestParams?: any): Observable<Array<ShowStudentDTO>>;

    /**
     * Get all students
     * 
     */
    apiStudentsGet(extraHttpRequestParams?: any): Observable<Array<ShowStudentDTO>>;

    /**
     * Delete a student
     * 
     * @param id The student ID to delete
     */
    apiStudentsIdDelete(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get a specific student by ID
     * 
     * @param id The student ID
     */
    apiStudentsIdGet(id: string, extraHttpRequestParams?: any): Observable<ShowStudentDTO>;

    /**
     * Upload student photo from base64 string
     * 
     * @param id The student ID
     * @param uploadPhotoBase64DTO The photo data containing base64 string and content type
     */
    apiStudentsIdPhotoBase64Post(id: string, uploadPhotoBase64DTO?: UploadPhotoBase64DTO, extraHttpRequestParams?: any): Observable<ShowStudentDTO>;

    /**
     * Delete student photo
     * 
     * @param id The student ID
     */
    apiStudentsIdPhotoDelete(id: string, extraHttpRequestParams?: any): Observable<ShowStudentDTO>;

    /**
     * Get student photo
     * 
     * @param id The student ID
     */
    apiStudentsIdPhotoGet(id: string, extraHttpRequestParams?: any): Observable<PhotoResponseDTO>;

    /**
     * Upload student photo
     * 
     * @param id The student ID
     * @param photo The photo file to upload
     */
    apiStudentsIdPhotoPost(id: string, photo?: Blob, extraHttpRequestParams?: any): Observable<ShowStudentDTO>;

    /**
     * Get student photo URL
     * 
     * @param id The student ID
     * @param expiryHours URL expiry time in hours (default: 1 hour)
     */
    apiStudentsIdPhotoUrlGet(id: string, expiryHours?: number, extraHttpRequestParams?: any): Observable<any>;

    /**
     * Update an existing student
     * 
     * @param id The student ID to update
     * @param updateStudentDTO The updated student data
     */
    apiStudentsIdPut(id: string, updateStudentDTO?: UpdateStudentDTO, extraHttpRequestParams?: any): Observable<ShowStudentDTO>;

    /**
     * Get student by Keycloak user ID
     * 
     * @param keycloakUserId The Keycloak user ID
     */
    apiStudentsKeycloakKeycloakUserIdGet(keycloakUserId: string, extraHttpRequestParams?: any): Observable<ShowStudentDTO>;

    /**
     * Create a new student
     * 
     * @param createStudentDTO The student data to create
     */
    apiStudentsPost(createStudentDTO?: CreateStudentDTO, extraHttpRequestParams?: any): Observable<ShowStudentDTO>;

    /**
     * Search students with filters
     * 
     * @param studentSearchDTO Search criteria
     */
    apiStudentsSearchPost(studentSearchDTO?: StudentSearchDTO, extraHttpRequestParams?: any): Observable<Array<ShowStudentDTO>>;

}
