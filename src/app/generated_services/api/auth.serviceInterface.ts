/**
 * Carlson Gracie Backend API
 * API for managing students, belts, graduation requirements, notices, frequencies and user authentication with Keycloak
 *
 * Contact: support@carlsongracie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ApiAuthLoginPost401Response } from '../model/models';
import { ChangePasswordRequest } from '../model/models';
import { KeycloakTokenResponse } from '../model/models';
import { KeycloakUserInfo } from '../model/models';
import { LoginRequest } from '../model/models';
import { LogoutRequest } from '../model/models';
import { RefreshTokenRequest } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface AuthServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * 
     * 
     * @param refreshToken 
     * @param changePasswordRequest 
     */
    apiAuthChangePasswordRefreshTokenPut(refreshToken: string, changePasswordRequest?: ChangePasswordRequest, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Authenticate user with username and password
     * 
     * @param loginRequest Login credentials
     */
    apiAuthLoginPost(loginRequest?: LoginRequest, extraHttpRequestParams?: any): Observable<KeycloakTokenResponse>;

    /**
     * Logout user
     * 
     * @param logoutRequest Logout request
     */
    apiAuthLogoutPost(logoutRequest?: LogoutRequest, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Refresh authentication token
     * 
     * @param refreshTokenRequest Refresh token request
     */
    apiAuthRefreshPost(refreshTokenRequest?: RefreshTokenRequest, extraHttpRequestParams?: any): Observable<KeycloakTokenResponse>;

    /**
     * Get current user information
     * 
     */
    apiAuthUserinfoGet(extraHttpRequestParams?: any): Observable<KeycloakUserInfo>;

}
