/**
 * Carlson Gracie Backend API
 * API for managing students, belts, graduation requirements, notices, frequencies and user authentication with Keycloak
 *
 * Contact: support@carlsongracie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ApiAuthLoginPost401Response } from '../model/models';
import { CreateFrequencyDTO } from '../model/models';
import { ShowFrequencyDTO } from '../model/models';
import { ShowFrequencyUntilNextGraduation } from '../model/models';
import { UpdateFrequencyDTO } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface FrequencyServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Get frequencies within a date range
     * 
     * @param startDate The start date
     * @param endDate The end date
     */
    apiFrequencyDateRangeGet(startDate?: string, endDate?: string, extraHttpRequestParams?: any): Observable<Array<ShowFrequencyDTO>>;

    /**
     * Get all frequencies
     * 
     */
    apiFrequencyGet(extraHttpRequestParams?: any): Observable<Array<ShowFrequencyDTO>>;

    /**
     * Get frequencies by graduation ID
     * 
     * @param graduationId The graduation ID
     */
    apiFrequencyGraduationGraduationIdGet(graduationId: string, extraHttpRequestParams?: any): Observable<Array<ShowFrequencyDTO>>;

    /**
     * Delete a frequency
     * 
     * @param id The frequency ID to delete
     */
    apiFrequencyIdDelete(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get a specific frequency by ID
     * 
     * @param id The frequency ID
     */
    apiFrequencyIdGet(id: string, extraHttpRequestParams?: any): Observable<ShowFrequencyDTO>;

    /**
     * Update an existing frequency
     * 
     * @param id The frequency ID to update
     * @param updateFrequencyDTO The updated frequency data
     */
    apiFrequencyIdPut(id: string, updateFrequencyDTO?: UpdateFrequencyDTO, extraHttpRequestParams?: any): Observable<ShowFrequencyDTO>;

    /**
     * 
     * 
     * @param studentId 
     */
    apiFrequencyNextGraduationRequirementsStudentIdGet(studentId: string, extraHttpRequestParams?: any): Observable<ShowFrequencyUntilNextGraduation>;

    /**
     * Create a new frequency
     * 
     * @param createFrequencyDTO The frequency data to create
     */
    apiFrequencyPost(createFrequencyDTO?: CreateFrequencyDTO, extraHttpRequestParams?: any): Observable<ShowFrequencyDTO>;

    /**
     * Get frequencies by user ID
     * 
     * @param userId 
     * @param studentId 
     */
    apiFrequencyUserUserIdGet(userId: string, studentId?: string, extraHttpRequestParams?: any): Observable<Array<ShowFrequencyDTO>>;

}
